<?xml version="1.0"?>
<launch>
  <arg name="id_robot" default="$(optenv ROBOT_ID robot)"/>
  <arg name="prefix" default="$(arg id_robot)_"/>

  <!-- kinematics: skid, omni -->
  <arg name="kinematics" default="$(optenv ROBOT_KINEMATICS skid)"/>
  <arg name="wheel_diameter" default="$(optenv ROBOT_WHEEL_DIAMETER 0.22)"/>
  <arg name="track_width" default="$(optenv ROBOT_TRACK_WIDTH 0.439)"/>
  <arg name="wheel_base" default="$(optenv ROBOT_WHEEL_BASE 0.430)"/>
  <arg name="odom_frame" default="$(arg prefix)odom"/>
  <arg name="base_frame" default="$(arg prefix)base_footprint"/>
  <arg name="ros_planar_move_plugin" default="false"/>
  <arg name="sim" default="false"/>
  <arg name="sim_arm_control" default="false"/>
  <arg name="cmd_vel" default="robotnik_base_control/cmd_vel"/>
  <arg name="launch_pantilt_camera_controller" default="false"/>
  <arg name="odom_broadcast_tf" default="true"/>
  <arg name="debug" default="false" />
  <arg unless="$(arg debug)" name="launch_prefix" value="" />
  <arg name="limited" default="false"/>
  <!-- kinova arm -->
  <!-- <arg name="kinova_arm" default="j2s7s300"/>
  <arg name="arm_prefix" default="$(arg prefix)$(arg kinova_arm)"/> -->
  <arg name="is7dof" default="true"/>

  <!-- Robot - Load joint controller configurations from YAML file to parameter server -->
  <group unless="$(arg sim)">
	  <rosparam file="$(find summit_xl_control)/config/robot_control.yaml" command="load" subst_value="true"/>

	  <!-- load the controllers -->
	  <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="
		  robotnik_base_control
		  joint_read_state_controller
		  ">
	  </node>

  </group>
    <!-- Simulation - Load joint controller configurations from YAML file to parameter server -->
  <group if="$(arg sim)">
	  <rosparam file="$(find summit_xl_control)/config/simulation/robot_control.yaml" command="load" subst_value="true"/>

      <!-- Kinova -->
    <!-- <group if="$(arg sim_arm_control)">
      <include file="$(find summit_xl_control)/launch/kinova_control.launch">
        <arg name="prefix" value="$(arg prefix)"/>
        <arg name="kinova_arm" value="$(arg kinova_arm)"/>
        <arg name="arm_prefix" value="$(arg arm_prefix)"/>
        <arg name="use_trajectory_controller" value="false"/>
        <arg name="is7dof" value="$(arg is7dof)"/>
      </include>
    </group> -->

    <!-- UR5 -->
    <!-- send fake joint values -->
    <!-- <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
      <param name="use_gui" value="TRUE"/>
      <rosparam param="/source_list">[/move_group/fake_controller_joint_states]</rosparam>
    </node> -->
    <!-- <include file="$(find ur_gazebo)/launch/controller_utils.launch"/> -->
    <!-- Robot state publisher -->
    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
      <param name="publish_frequency" type="double" value="50.0" />
      <param name="tf_prefix" type="string" value="" />
    </node>

    <!-- joint_state_controller -->
    <rosparam file="$(find ur_gazebo)/controller/joint_state_controller.yaml" command="load"/>
    <node name="joint_state_controller_spawner" pkg="controller_manager" type="controller_manager" args="spawn joint_state_controller" respawn="false" output="screen"/>

    <!-- start this controller -->
    <rosparam file="$(find summit_xls_ur5_moveit_config_new)/config/arm_controller_gazebo.yaml" command="load"/>
    <node name="arm_controller_spawner" pkg="controller_manager" type="controller_manager" args="spawn fake_arm_controller" respawn="false" output="screen"/>

    <!-- load other controllers -->
    <node name="ros_control_controller_manager" pkg="controller_manager" type="controller_manager" respawn="false" output="screen" args="load joint_group_position_controller" />

    <!-- Remap follow_joint_trajectory -->
    <remap if="$(arg sim)" from="/follow_joint_trajectory" to="/fake_arm_controller/follow_joint_trajectory"/>
    
    <!-- Launch moveit -->
    <include file="$(find summit_xls_ur5_moveit_config_new)/launch/move_group.launch">
      <!-- <arg name="limited" default="$(arg limited)"/> -->
      <arg name="debug" default="$(arg debug)" />
    </include>

    

    <!-- if it has camera ptz -->
    <group if="$(arg launch_pantilt_camera_controller)">
      <node if="$(arg ros_planar_move_plugin)" name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="
        joint_read_state_controller
        joint_pan_position_controller
        joint_tilt_position_controller
       ">
      </node>

      <!-- load the robotnik_base_control ros controllers -->
      <node unless="$(arg ros_planar_move_plugin)" name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="
        robotnik_base_control
        joint_read_state_controller
        joint_pan_position_controller
        joint_tilt_position_controller
       ">
      </node>
    </group>
    <!-- if does not have camera ptz -->
    <group unless="$(arg launch_pantilt_camera_controller)">
      <node if="$(arg ros_planar_move_plugin)" name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="
        joint_read_state_controller
       ">
      </node>

      <!-- load the robotnik_base_control ros controllers -->
      <node unless="$(arg ros_planar_move_plugin)" name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="
        robotnik_base_control
        joint_read_state_controller
       ">
      </node>
    </group>


  </group>


  <node pkg="twist_mux" type="twist_mux" name="twist_mux">
    <rosparam command="load" file="$(find summit_xl_control)/config/twist_mux.yaml" />
    <remap from="cmd_vel_out" to="$(arg cmd_vel)" />
  </node>
  <node pkg="twist_mux" type="twist_marker" name="twist_marker">
    <remap from="twist"  to="$(arg cmd_vel)"/>
    <remap from="marker" to="twist_marker"/>
  </node>


</launch>
